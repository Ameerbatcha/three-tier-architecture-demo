pipeline {
    agent any 

        tools {
      maven 'maven'
      nodejs 'nodejs'
    }


    parameters {
        choice(
            name: 'SERVICE_NAME',
            choices: ['catalogue', 'user', 'cart', 'shipping', 'ratings', 'payment', 'dispatch','mongo','mysql','web', 'ALL'],
            description: 'Select the service to deploy'
        )
    }
    stages {

        stage('SCM'){
            steps{
                 deleteDir()
                git 'https://github.com/Ameerbatcha/three-tier-architecture-demo.git'
            }
        }
        stage('SAST') {
            steps {
                script {
                    def services = []
                    if (params.SERVICE_NAME == 'ALL') {
                        services = ['catalogue', 'user', 'cart', 'shipping', 'ratings', 'payment', 'dispatch', 'mongo', 'mysql', 'web']
                    } else {
                        services = [params.SERVICE_NAME]
                    }

                    for (String svc : services) {
                        dir("${svc}") {
                            if (fileExists('pom.xml')) {
                                // Java service
                                sh 'mvn clean compile'
                                withSonarQubeEnv('sonar') {
                                    sh 'mvn sonar:sonar '
                                   //  sh 'mvn sonar:sonar -Dsonar.exclusions=**/*.java'
                                }
                            // } else if (fileExists('package.json')) {
                            //     // Node.js service
                            //     withSonarQubeEnv('sonar') {
                            //         sh 'npm install'
                            //         sh 'npm run lint'
                            //         sh 'npx sonar-scanner'
                            //     }
                          } else if (fileExists('requirements.txt')) {
                                // Python service
                                sh 'pip install -r requirements.txt'
                                sh 'pip install pylint'  // Ensure pylint is installed
                                withSonarQubeEnv('sonar') {
                                    sh 'pylint $(find . -type f -name "*.py")'
                                    sh 'sonar-scanner'
                                }
                            }else {
                                echo "No known project type found for ${svc}"
                            }
                        }
                    }
                }
            }
        }
    }
}
