pipeline {
    agent any

    tools {
        maven 'maven'
        nodejs 'nodejs'
    }

    parameters {
        choice(
            name: 'SERVICE_NAME',
            choices: ['catalogue', 'user', 'cart', 'shipping', 'ratings', 'payment', 'dispatch','mongo','mysql','web', 'ALL'],
            description: 'Select the service to deploy'
        )
    }
    environment {

        SONAR_TOKEN = credentials('sonarqube-auth')
    }

    stages {
        stage('SCM') {
            steps {
                deleteDir()
                git 'https://github.com/Ameerbatcha/three-tier-architecture-demo.git'
            }
        }

        stage('SAST') {
            steps {
                script {
                    def services = []
                    if (params.SERVICE_NAME == 'ALL') {
                        services = ['catalogue', 'user', 'cart', 'shipping', 'ratings', 'payment', 'dispatch', 'mongo', 'mysql', 'web']
                    } else {
                        services = [params.SERVICE_NAME]
                    }

                    for (String svc : services) {
                        dir("${svc}") {
                            if (fileExists('pom.xml')) {
                                // Java service
                                sh 'mvn clean compile'
                                withSonarQubeEnv('sonar') {
                                    sh 'mvn sonar:sonar'
                                }
                            } else if (fileExists('package.json')) {
                                // Node.js service
                                // Copy files to the remote server
                                sshPublisher(publishers: [
                                    sshPublisherDesc(
                                        configName: 'worker1',
                                        transfers: [
                                            sshTransfer(
                                                sourceFiles: '**/*',
                                                removePrefix: '',
                                                remoteDirectory: "/opt/docker/${svc}",
                                                execCommand: """
                                                    cd /opt/docker/${svc}
                                                    npm install
                                                 //   npm install eslint
                                                //    npm run lint || echo "Lint script not found, skipping lint"
                                                    echo 'sonar.projectKey=${svc}' > sonar-scanner.properties
                                                    echo 'sonar.sources=.' >> sonar-scanner.properties
                                                    echo 'sonar.host.url=http://3.109.5.158:9000' >> sonar-scanner.properties
                                                    echo 'sonar.login=${SONAR_TOKEN}' >> sonar-scanner.properties
                                                    sonar-scanner -Dsonar.projectKey=${svc} -Dsonar.login=${SONAR_TOKEN} -Dproject.settings=sonar-scanner.properties
                                                """,
                                            )
                                        ],
                                        usePromotionTimestamp: false,
                                        verbose: true
                                    )
                                ])
                            //   } else if (fileExists('requirements.txt')) {
                    //         // Python service
                    //         sh 'pip install -r requirements.txt'
                    //         sh 'pip install pylint'  // Ensure pylint is installed
                            
                    //         withSonarQubeEnv('sonar') {
                    //             writeFile file: 'sonar-project.properties', text: """
                    //             sonar.projectKey=${svc}
                    //             sonar.sources=.
                    //             sonar.python.pylint.reportPaths=pylint-report.txt
                    //             """
                    //             sh 'pylint $(find . -type f -name "*.py") > pylint-report.txt || true'
                    //             withEnv(["PATH+EXTRA=/usr/local/bin/sonar-scanner-6.0.0.4432-linux/bin"]) {
                    //                 sh 'sonar-scanner'
                    //             }
                            } else {
                                echo "No known project type found for ${svc}"
                            }
                        }
                    }
                }
            }
        }
    }
}
